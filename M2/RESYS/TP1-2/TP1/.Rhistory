g = read_graph("/home/alex/Documents/M2/RESYS/TP/TP1/simple_graph.txt")
plot(g)
library(igraph)
g = read_graph("/home/alex/Documents/M2/RESYS/TP/TP1/simple_graph.txt")
library(igraph)
g = read_graph("/home/alex/Documents/M2/RESYS/TP/TP1/simple_graph.txt")
g = as.undirected(g)
plot(g)
install.packages("igraph", dependencies= TRUE)
install.packages("igraph", dependencies = TRUE)
library(igraph)
g = read_graph("/home/alex/Documents/M2/RESYS/TP/TP1/simple_graph.txt")
g = as.undirected(g)
plot(g)
g = read_graph("/home/alex/Documents/M2/RESYS/TP/TP1/simple_graph.txt", format="edgelist")
g = as.undirected(g)
plot(g)
load(/home/alex/Documents/RESYS/projet/miic_graphe1.RData)
load("/home/alex/Documents/RESYS/projet/miic_graphe1.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe2.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe3.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe1.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe5.RData")
rm(list = ls()) #clear environment
load("/home/alex/Documents/RESYS/projet/miic_graphe2.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe3.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe2.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe3.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe1.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe4.RData")
load("/home/alex/Documents/RESYS/projet/miic_graphe4.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe5.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe1.RData")
miic_res1 = miic_res
load("/home/alex/Documents/RESYS/projet/miic_graphe2.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe3.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe4.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe5.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe1.RData")
miic_res1 = miic_res
miic.plot(miic_res1, igraphLayout = layout_nicely)
library(miic) # Learning Causal or Non-Causal Graphical Models Using Information Theory
miic.plot(miic_res1, igraphLayout = layout_nicely)
miic.plot(miic_res2, igraphLayout = layout_nicely)
miic.plot(miic_res3, igraphLayout = layout_nicely)
miic.plot(miic_res4, igraphLayout = layout_nicely)
miic.plot(miic_res5, igraphLayout = layout_nicely)
miic.plot(miic_res1, igraphLayout = layout_nicely)
miic.plot(miic_res2, igraphLayout = layout_nicely)
miic.plot(miic_res3, igraphLayout = layout_nicely)
miic.plot(miic_res4, igraphLayout = layout_nicely)
miic.plot(miic_res5, igraphLayout = layout_nicely)
miic.plot(miic_res1, igraphLayout = layout_nicely)
miic.plot(miic_res5, igraphLayout = layout_nicely)
miic.plot(miic_res2, igraphLayout = layout_nicely)
miic.plot(miic_res3, igraphLayout = layout_nicely)
miic.plot(miic_res4, igraphLayout = layout_nicely)
save.image("/home/alex/Documents/RESYS/projet/miic_allgraphs.Rdata")
rm(list = ls()) #clear environment
g <- make_graph("Zachary")
sg <- cluster_spinglass(g)
le <- cluster_leading_eigen(g)
compare(sg, le, method="rand")
compare(membership(sg), membership(le))
install.packages('Seurat')
library(Seurat)
install.packages("Seurat")
library(Seurat, dependencies= TRUE)
install.packages('Seurat', dependencies= TRUE)
library(Seurat)
dropout_fraction = apply(data, 2, function(x){length(which(x==0)) / length(x)})
#reconstruct graph from expression data
data = read.table("/home/alex/Documents/RESYS/projet/data/norm_preProcessed_32nodes.txt", header = T)
library(Seurat)
dropout_fraction = apply(data, 2, function(x){length(which(x==0)) / length(x)})
# Filtering on genes with less than 50% dropout
good_TFs = which(dropout_fraction < 0.5)
# You should go from 39 genes to 29
print(dim(scale_expr_df))
expr_df = data[,good_TFs]
rm(list = ls()) #clear environment
load("/home/alex/Documents/RESYS/projet/miic_graphe2.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe3.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe4.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe5.Rdata")
load("/home/alex/Documents/RESYS/projet/miic_graphe1.RData")
miic_res1 = miic_res
library(miic) # Learning Causal or Non-Causal Graphical Models Using Information Theory
miic.plot(miic_res1, igraphLayout = layout_nicely)
miic.plot(miic_res2, igraphLayout = layout_nicely)
miic.plot(miic_res3, igraphLayout = layout_nicely)
miic.plot(miic_res4, igraphLayout = layout_nicely)
miic.plot(miic_res5, igraphLayout = layout_nicely)
save.image("/home/alex/Documents/RESYS/projet/miic_allgraphs.Rdata")
miic_results = c(miic_res1, miic_res2, miic_res3, miic_res4, miic_res5)
View(miic_results)
View(miic_results)
